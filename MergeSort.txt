#include <iostream>
#include <time.h>
#include <ctime>
#include <chrono>
#include <thread>
#include <fstream>
using namespace std;
using namespace std::chrono;
void merge(int *,int, int , int );
void merge_sort(int *arr, int low, int high)
{
    int mid;
    if (low < high){
        //divide the array at mid and sort independently using merge sort
        mid=(low+high)/2;
        merge_sort(arr,low,mid);
        merge_sort(arr,mid+1,high);
        merge(arr,low,high,mid);
    }
}
// Merge sort 
void merge(int *arr, int low, int high, int mid)
{
    int ,a b, k, c[50];
    a = low;
    k = low;
    b = mid + 1;
    while (a <= mid && b <= high) 
{
        if (arr[a] < arr[b]) 
        {
            c[k] = arr[a];
            k++;
            a++;
        }
        else 
        {
            c[k] = arr[b];
            k++;
            b++;
        }
 }
    while (a <= mid) 
    {
        c[k] = arr[a];
        k++;
        a++;
    }
    while (b <= high) 
    {
        c[k] = arr[b];
        k++;
        b++;
    }
    for (a = low; a < k; a++)  
    {
        arr[a] = c[a];
    }
}
// read input array and call mergesort
int main()
{
    using namespace std::this_thread; // sleep_for, sleep_until
    using namespace std::chrono; // nanoseconds, system_clock, seconds
    int num[5]; int elapsed_time[5];
    for (int a = 0; a<5; a++){
        

       /* clock_t startClock,finishClock;
        double timeCount;
        startClock = clock();*/

        sleep_for(nanoseconds(100));
        sleep_until(system_clock::now() + seconds(1));

        // initialize random seed
    srand (time(NULL));

    //Generate size of array for current iteration
    int size = rand() % 20 + 1;
    num[a] = size;

    int myarray[size];
    cout <<"Number of elements generated by the random number generator is:" << size <<endl;
    
    cout <<"The array generated is: ";
    for (int a = 0; a < size; a++) {
        myarray[a] = rand() % 100 + 1;
        cout << myarray[i] << " ";
    }
    cout << endl;

    auto start = high_resolution_clock::now();
    merge_sort(myarray, 0, size-1);
    auto stop = high_resolution_clock::now();

    cout<<"Sorted array: ";
    for (int a = 0; a < size; a++)
    {
        cout<<myarray[a]<<" ";
    }
    cout <<endl;

    auto duration = duration_cast<microseconds>(stop - start); 

    elapsed_time[a] = duration.count();
  
    cout << "Time taken by Sorting algorithm: "
         << duration.count() << " microseconds" << endl; 
    
    /*finishClock = clock();
    timeCount = finishClock - startClock ;
    elapsed_time[a] = timeCount/100.0;*/

    cout << " Num is " << num[a] << endl;

    cout << endl;
    cout <<endl;
    }

    // open file ''example.dat'' for writing
    filebuf buffer;
    ostream output(&buffer);
    istream input(&buffer);
    buffer.open ("example.dat", ios::in | ios::out | ios::trunc);

    for (int a=0; a<5; a++) {
        // write one line of number and time
        output << num[i] << " " << elapsed_time[a] << endl;
    }

}